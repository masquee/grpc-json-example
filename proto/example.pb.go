// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

package example // import "grpc-json-example/proto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role int32

const (
	Role_GUEST  Role = 0
	Role_MEMBER Role = 1
	Role_ADMIN  Role = 2
)

var Role_name = map[int32]string{
	0: "GUEST",
	1: "MEMBER",
	2: "ADMIN",
}
var Role_value = map[string]int32{
	"GUEST":  0,
	"MEMBER": 1,
	"ADMIN":  2,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_example_6ffd639f0912f78d, []int{0}
}

type User struct {
	Id                   uint32               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Role                 Role                 `protobuf:"varint,2,opt,name=role,enum=example.Role" json:"role,omitempty"`
	CreateDate           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_example_6ffd639f0912f78d, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_GUEST
}

func (m *User) GetCreateDate() *timestamp.Timestamp {
	if m != nil {
		return m.CreateDate
	}
	return nil
}

type UserRole struct {
	Role                 Role     `protobuf:"varint,1,opt,name=role,enum=example.Role" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRole) Reset()         { *m = UserRole{} }
func (m *UserRole) String() string { return proto.CompactTextString(m) }
func (*UserRole) ProtoMessage()    {}
func (*UserRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_example_6ffd639f0912f78d, []int{1}
}
func (m *UserRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRole.Unmarshal(m, b)
}
func (m *UserRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRole.Marshal(b, m, deterministic)
}
func (dst *UserRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRole.Merge(dst, src)
}
func (m *UserRole) XXX_Size() int {
	return xxx_messageInfo_UserRole.Size(m)
}
func (m *UserRole) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRole.DiscardUnknown(m)
}

var xxx_messageInfo_UserRole proto.InternalMessageInfo

func (m *UserRole) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_GUEST
}

func init() {
	proto.RegisterType((*User)(nil), "example.User")
	proto.RegisterType((*UserRole)(nil), "example.UserRole")
	proto.RegisterEnum("example.Role", Role_name, Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*empty.Empty, error)
	ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UserService_ListUsersClient, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/example.UserService/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UserService_ListUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[0], c.cc, "/example.UserService/ListUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_ListUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceListUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceListUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceServer interface {
	AddUser(context.Context, *User) (*empty.Empty, error)
	ListUsers(*empty.Empty, UserService_ListUsersServer) error
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).ListUsers(m, &userServiceListUsersServer{stream})
}

type UserService_ListUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceListUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceListUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUsers",
			Handler:       _UserService_ListUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example.proto",
}

func init() { proto.RegisterFile("example.proto", fileDescriptor_example_6ffd639f0912f78d) }

var fileDescriptor_example_6ffd639f0912f78d = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4f, 0xc2, 0x30,
	0x14, 0xc6, 0xed, 0x44, 0x90, 0x47, 0x20, 0xa4, 0x07, 0x43, 0xe6, 0x41, 0xe4, 0xb4, 0x98, 0xb0,
	0x11, 0xf4, 0x24, 0x5e, 0x20, 0x2c, 0xc6, 0x44, 0x3c, 0x0c, 0xb8, 0x78, 0x31, 0xdd, 0xf6, 0x1c,
	0x25, 0x1b, 0x5d, 0xda, 0x42, 0xf4, 0xbf, 0x37, 0xdd, 0x40, 0xa3, 0x86, 0xe3, 0xf7, 0xde, 0x6f,
	0xdf, 0x6f, 0x6d, 0xa1, 0x89, 0x1f, 0x2c, 0xcb, 0x53, 0x74, 0x73, 0x29, 0xb4, 0xa0, 0xb5, 0x7d,
	0xb4, 0x2f, 0x13, 0x21, 0x92, 0x14, 0xbd, 0x62, 0x1c, 0x6e, 0xdf, 0x3d, 0xcc, 0x72, 0xfd, 0x59,
	0x52, 0xf6, 0xd5, 0xdf, 0xa5, 0xe6, 0x19, 0x2a, 0xcd, 0xb2, 0xbc, 0x04, 0x7a, 0x3b, 0xa8, 0x2c,
	0x15, 0x4a, 0xda, 0x02, 0x8b, 0xc7, 0x1d, 0xd2, 0x25, 0x4e, 0x33, 0xb0, 0x78, 0x4c, 0xaf, 0xa1,
	0x22, 0x45, 0x8a, 0x1d, 0xab, 0x4b, 0x9c, 0xd6, 0xb0, 0xe9, 0x1e, 0xe4, 0x81, 0x48, 0x31, 0x28,
	0x56, 0x74, 0x04, 0x8d, 0x48, 0x22, 0xd3, 0xf8, 0x16, 0x33, 0x8d, 0x9d, 0xd3, 0x2e, 0x71, 0x1a,
	0x43, 0xdb, 0x2d, 0x8d, 0xee, 0xc1, 0xe8, 0x2e, 0x0e, 0xc6, 0x00, 0x4a, 0x7c, 0xca, 0x34, 0xf6,
	0xfa, 0x70, 0x6e, 0xbc, 0xa6, 0xee, 0xdb, 0x45, 0x8e, 0xba, 0x6e, 0x1c, 0xa8, 0x14, 0x68, 0x1d,
	0xce, 0x1e, 0x97, 0xfe, 0x7c, 0xd1, 0x3e, 0xa1, 0x00, 0xd5, 0x99, 0x3f, 0x9b, 0xf8, 0x41, 0x9b,
	0x98, 0xf1, 0x78, 0x3a, 0x7b, 0x7a, 0x69, 0x5b, 0xc3, 0x2d, 0x34, 0x4c, 0xf1, 0x1c, 0xe5, 0x8e,
	0x47, 0x48, 0x07, 0x50, 0x1b, 0xc7, 0x71, 0x71, 0xc4, 0x9f, 0x62, 0x13, 0xed, 0x8b, 0x7f, 0x7f,
	0xea, 0x9b, 0x8b, 0xa3, 0x77, 0x50, 0x7f, 0xe6, 0x4a, 0x1b, 0x46, 0xd1, 0x23, 0x90, 0xfd, 0xbb,
	0x6b, 0x40, 0x26, 0x0f, 0xaf, 0xf7, 0x09, 0xd7, 0xab, 0x6d, 0xe8, 0x46, 0x22, 0xf3, 0xd6, 0x62,
	0xc5, 0x36, 0xa1, 0x64, 0x9b, 0x78, 0x25, 0xa4, 0xd2, 0x5e, 0x22, 0xf3, 0xa8, 0xbf, 0x56, 0x62,
	0xd3, 0xdf, 0x7f, 0x56, 0x3e, 0xc8, 0x68, 0x9f, 0xc2, 0x6a, 0x11, 0x6f, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xd2, 0x35, 0xd2, 0xa8, 0xe4, 0x01, 0x00, 0x00,
}
